---
- name: get java version
  shell:   "java -version 2>&1"
  register: java_version_result
  changed_when: false

  # NOTE: regex_search() returns an array of matches, so we will need returned_java_version[0] to make use of the first (and only) value
- set_fact: returned_java_version={{ java_version_result.stdout | regex_search('(?P<test>\d+\.\d+)', '\\g<test>' ) }}

- name: test java version
  fail:
    msg: "this installation of play requires java version {{ play_minimum_java_version }} or higher"
  when: "not returned_java_version[0] | version_compare('{{ play_minimum_java_version }}', '>=')"

- name: set play checksum key
  set_fact:
    checksum_key: "{{ play_download_file | replace('-','_') | replace('.','_')}}"

- name: set play checksum
  set_fact:
    play_checksum: "{{ checksums[checksum_key][play_checksum_algorithm] }}"
  when: play_checksum == ""

- name: stat play d/l
  stat:
    path:  "{{ play_download_dir }}/{{ play_download_file }}"
    checksum_algorithm: "{{ play_checksum_algorithm }}"
  register: existing_dl

- set_fact:
    force_new_download: "{{ existing_dl.stat.checksum != play_checksum }}"
  when: existing_dl.stat.exists

- name: get play
  get_url:
    url:      "{{ play_url }}"
    dest:     "{{ play_download_dir }}"
    checksum: "{{ play_checksum_algorithm }}:{{ play_checksum }}"
  register: got_play
  when: force_new_download | default ('true')

- name: install prereqs
  package:
    name: "{{ item }}"
    state: present
  become: true
  with_items:
    - git
    - ant

- name: extract play
  unarchive:
    src:        "{{ play_download_dir }}/{{ play_download_file }}"
    dest:       "{{ play_install_dir }}"
    remote_src: yes
  become: true
  when: got_play.changed

- name: symlink play
  file:
    src:    "{{ play_install_dir }}/{{ play_dir }}"
    dest:   "{{ play_path }}"
    state:  link
  become: true

- name: fix the docviewer build file
  lineinfile:
    dest: "{{ play_path }}/modules/docviewer/build.xml"
    insertafter: '(^\s*)<target name="compile">$'
    line: '    <mkdir dir="lib" />'
    state: present
  become: true

- name: build play
  shell: "ant -Dversion={{ play_version }}"
  args:
    chdir: "{{ play_path }}/framework"
  become: true
  when: got_play.changed

- name: add play to path
  lineinfile:
    dest:   "/etc/profile.d/play.sh"
    line:   "export PATH=$PATH:{{ play_path }}/"
    state:  present
    create: yes
  become: true

- name: get play version
  shell: "play version"
  args:
    executable: /bin/bash
  register: play_version_result
  changed_when: false
  failed_when: false

- name: test play version
  fail:
    msg: "attempted to install play version {{ play_version }}, but something went wrong"
  when: "'{{ play_version }}' not in play_version_result.stdout"
